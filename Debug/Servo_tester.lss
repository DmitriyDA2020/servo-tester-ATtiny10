
Servo_tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800040  000002e4  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800048  00800048  00000380  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000855  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005be  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000540  00000000  00000000  000012af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ed  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000235  00000000  00000000  00001d09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001f3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	4b c0       	rjmp	.+150    	; 0x9a <__vector_1>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	31 c0       	rjmp	.+98     	; 0x6c <__vector_4>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_copy_data>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	e4 ee       	ldi	r30, 0xE4	; 228
  2a:	f2 e4       	ldi	r31, 0x42	; 66
  2c:	02 c0       	rjmp	.+4      	; 0x32 <__do_copy_data+0x10>
  2e:	31 91       	ld	r19, Z+
  30:	3d 93       	st	X+, r19
  32:	a8 34       	cpi	r26, 0x48	; 72
  34:	b2 07       	cpc	r27, r18
  36:	d9 f7       	brne	.-10     	; 0x2e <__do_copy_data+0xc>

00000038 <__do_clear_bss>:
  38:	20 e0       	ldi	r18, 0x00	; 0
  3a:	a8 e4       	ldi	r26, 0x48	; 72
  3c:	b0 e0       	ldi	r27, 0x00	; 0
  3e:	01 c0       	rjmp	.+2      	; 0x42 <.do_clear_bss_start>

00000040 <.do_clear_bss_loop>:
  40:	1d 93       	st	X+, r17

00000042 <.do_clear_bss_start>:
  42:	aa 34       	cpi	r26, 0x4A	; 74
  44:	b2 07       	cpc	r27, r18
  46:	e1 f7       	brne	.-8      	; 0x40 <.do_clear_bss_loop>
  48:	9d d0       	rcall	.+314    	; 0x184 <main>
  4a:	4a c1       	rjmp	.+660    	; 0x2e0 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <adc_init>:


void adc_init(void)
{
	// ADC initialization
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
  4e:	46 e8       	ldi	r20, 0x86	; 134
  50:	4d bb       	out	0x1d, r20	; 29
	DIDR0 = 1 << ADC0D;
  52:	41 e0       	ldi	r20, 0x01	; 1
  54:	47 bb       	out	0x17, r20	; 23
  56:	08 95       	ret

00000058 <adc_get_val>:
}

unsigned char adc_get_val(void)
{
	ADCSRA |= 1 << ADSC;
  58:	4d b3       	in	r20, 0x1d	; 29
  5a:	40 64       	ori	r20, 0x40	; 64
  5c:	4d bb       	out	0x1d, r20	; 29
	while (!(ADCSRA & (1 << ADIF)));
  5e:	ec 9b       	sbis	0x1d, 4	; 29
  60:	fe cf       	rjmp	.-4      	; 0x5e <adc_get_val+0x6>
	ADCSRA |= 1 << ADIF;
  62:	4d b3       	in	r20, 0x1d	; 29
  64:	40 61       	ori	r20, 0x10	; 16
  66:	4d bb       	out	0x1d, r20	; 29
	return ADCL;
  68:	89 b3       	in	r24, 0x19	; 25
  6a:	08 95       	ret

0000006c <__vector_4>:
unsigned int servo_minimal_pwm_value = SERVO_LEFT_END_POS;
unsigned int servo_maximum_pwm_value = SERVO_RIGHT_END_POS;
unsigned int servo_central_pwm_value = SERVO_CENTRAL_POS;

ISR(TIM0_OVF_vect)
{
  6c:	1f 93       	push	r17
  6e:	0f 93       	push	r16
  70:	0f b7       	in	r16, 0x3f	; 63
  72:	0f 93       	push	r16
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	4f 93       	push	r20
	static char delay_counter = 0;
	delay_counter++;
  78:	48 a1       	lds	r20, 0x48	; 0x800048 <__data_end>
  7a:	4f 5f       	subi	r20, 0xFF	; 255
  7c:	48 a9       	sts	0x48, r20	; 0x800048 <__data_end>
	if (delay_counter > 10) // Delay 300ms
  7e:	4b 30       	cpi	r20, 0x0B	; 11
  80:	30 f0       	brcs	.+12     	; 0x8e <__vector_4+0x22>
	{
		delay_counter = 0;
  82:	18 a9       	sts	0x48, r17	; 0x800048 <__data_end>
		button_flag = 1;
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	46 a9       	sts	0x46, r20	; 0x800046 <button_flag>
		STOP_BUTTON_COUNT;
  88:	4b b5       	in	r20, 0x2b	; 43
  8a:	4e 7f       	andi	r20, 0xFE	; 254
  8c:	4b bd       	out	0x2b, r20	; 43
	}
}
  8e:	4f 91       	pop	r20
  90:	0f 91       	pop	r16
  92:	0f bf       	out	0x3f, r16	; 63
  94:	0f 91       	pop	r16
  96:	1f 91       	pop	r17
  98:	18 95       	reti

0000009a <__vector_1>:

ISR(INT0_vect)
{
  9a:	1f 93       	push	r17
  9c:	0f 93       	push	r16
  9e:	0f b7       	in	r16, 0x3f	; 63
  a0:	0f 93       	push	r16
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	4f 93       	push	r20
	if (button_flag == 1)
  a6:	46 a1       	lds	r20, 0x46	; 0x800046 <button_flag>
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	59 f4       	brne	.+22     	; 0xc2 <__vector_1+0x28>
	{
		button_flag = 0;
  ac:	16 a9       	sts	0x46, r17	; 0x800046 <button_flag>
		START_BUTTON_COUNT;
  ae:	4b b5       	in	r20, 0x2b	; 43
  b0:	41 60       	ori	r20, 0x01	; 1
  b2:	4b bd       	out	0x2b, r20	; 43
		mode_flag++;
  b4:	49 a1       	lds	r20, 0x49	; 0x800049 <mode_flag>
  b6:	4f 5f       	subi	r20, 0xFF	; 255
  b8:	49 a9       	sts	0x49, r20	; 0x800049 <mode_flag>
		if (mode_flag > TEST_MODE)
  ba:	49 a1       	lds	r20, 0x49	; 0x800049 <mode_flag>
  bc:	43 30       	cpi	r20, 0x03	; 3
  be:	08 f0       	brcs	.+2      	; 0xc2 <__vector_1+0x28>
		{
			mode_flag = ANALOG_MODE;
  c0:	19 a9       	sts	0x49, r17	; 0x800049 <mode_flag>
		}
	}
}
  c2:	4f 91       	pop	r20
  c4:	0f 91       	pop	r16
  c6:	0f bf       	out	0x3f, r16	; 63
  c8:	0f 91       	pop	r16
  ca:	1f 91       	pop	r17
  cc:	18 95       	reti

000000ce <range_converse>:
		}
	}
}

unsigned int range_converse(unsigned int input_val, unsigned int maximum_pwm_value, unsigned int minimal_pwm_value)
{
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	00 d0       	rcall	.+0      	; 0xd8 <range_converse+0xa>
  d8:	00 d0       	rcall	.+0      	; 0xda <range_converse+0xc>
  da:	00 d0       	rcall	.+0      	; 0xdc <range_converse+0xe>
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	ce 5f       	subi	r28, 0xFE	; 254
  e2:	df 4f       	sbci	r29, 0xFF	; 255
  e4:	58 83       	st	Y, r21
  e6:	4a 93       	st	-Y, r20
  e8:	c1 50       	subi	r28, 0x01	; 1
  ea:	d0 40       	sbci	r29, 0x00	; 0
	return (unsigned long) (input_val - ADC_MINIMAL_VALUE) * (unsigned long) (maximum_pwm_value - minimal_pwm_value) / (ADC_MAXIMUM_VALUE - ADC_MINIMAL_VALUE) + minimal_pwm_value;
  ec:	28 2f       	mov	r18, r24
  ee:	39 2f       	mov	r19, r25
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	cd 5f       	subi	r28, 0xFD	; 253
  f6:	df 4f       	sbci	r29, 0xFF	; 255
  f8:	29 93       	st	Y+, r18
  fa:	39 93       	st	Y+, r19
  fc:	49 93       	st	Y+, r20
  fe:	58 83       	st	Y, r21
 100:	c6 50       	subi	r28, 0x06	; 6
 102:	d0 40       	sbci	r29, 0x00	; 0
 104:	46 2f       	mov	r20, r22
 106:	57 2f       	mov	r21, r23
 108:	cf 5f       	subi	r28, 0xFF	; 255
 10a:	df 4f       	sbci	r29, 0xFF	; 255
 10c:	89 91       	ld	r24, Y+
 10e:	98 81       	ld	r25, Y
 110:	c2 50       	subi	r28, 0x02	; 2
 112:	d0 40       	sbci	r29, 0x00	; 0
 114:	48 1b       	sub	r20, r24
 116:	59 0b       	sbc	r21, r25
 118:	1f 93       	push	r17
 11a:	1f 93       	push	r17
 11c:	5f 93       	push	r21
 11e:	4f 93       	push	r20
 120:	cd 5f       	subi	r28, 0xFD	; 253
 122:	df 4f       	sbci	r29, 0xFF	; 255
 124:	69 91       	ld	r22, Y+
 126:	79 91       	ld	r23, Y+
 128:	89 91       	ld	r24, Y+
 12a:	98 81       	ld	r25, Y
 12c:	c6 50       	subi	r28, 0x06	; 6
 12e:	d0 40       	sbci	r29, 0x00	; 0
 130:	88 d0       	rcall	.+272    	; 0x242 <__mulsi3>
 132:	0f 91       	pop	r16
 134:	0f 91       	pop	r16
 136:	0f 91       	pop	r16
 138:	0f 91       	pop	r16
 13a:	46 2f       	mov	r20, r22
 13c:	57 2f       	mov	r21, r23
 13e:	68 2f       	mov	r22, r24
 140:	79 2f       	mov	r23, r25
 142:	97 2f       	mov	r25, r23
 144:	86 2f       	mov	r24, r22
 146:	75 2f       	mov	r23, r21
 148:	64 2f       	mov	r22, r20
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	9f d0       	rcall	.+318    	; 0x292 <__udivmodsi4>
 154:	cf 5f       	subi	r28, 0xFF	; 255
 156:	df 4f       	sbci	r29, 0xFF	; 255
 158:	89 91       	ld	r24, Y+
 15a:	98 81       	ld	r25, Y
 15c:	82 0f       	add	r24, r18
 15e:	93 1f       	adc	r25, r19
}
 160:	0f 91       	pop	r16
 162:	0f 91       	pop	r16
 164:	0f 91       	pop	r16
 166:	0f 91       	pop	r16
 168:	0f 91       	pop	r16
 16a:	0f 91       	pop	r16
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	08 95       	ret

00000176 <button_init>:

void button_init(void)
{
	// Button initialization
	PUEB = 1 << BUTTON_PIN;
 176:	44 e0       	ldi	r20, 0x04	; 4
 178:	43 b9       	out	0x03, r20	; 3
	// Button interrupt setting
	EICRA = 1 << ISC01; // Interrupt request on falling edge on INT0 pin
 17a:	42 e0       	ldi	r20, 0x02	; 2
 17c:	45 bb       	out	0x15, r20	; 21
	EIMSK = 1 << INT0; 
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	43 bb       	out	0x13, r20	; 19
 182:	08 95       	ret

00000184 <main>:
}

int main(void)
{
	// Unlock protection and set Fcpu 8 MHz
	CCP = 0xD8;
 184:	48 ed       	ldi	r20, 0xD8	; 216
 186:	4c bf       	out	0x3c, r20	; 60
	CLKPSR = 0x00;
 188:	16 bf       	out	0x36, r17	; 54
	
	// Peripherial initialization
	adc_init();
 18a:	61 df       	rcall	.-318    	; 0x4e <adc_init>
	button_init();
 18c:	f4 df       	rcall	.-24     	; 0x176 <button_init>
	servo_init();
 18e:	54 d0       	rcall	.+168    	; 0x238 <servo_init>
	
	// Enable global interrupt
	sei();
 190:	78 94       	sei
    while (1)
    {
		if (mode_flag == ANALOG_MODE)
 192:	49 a1       	lds	r20, 0x49	; 0x800049 <mode_flag>
 194:	41 13       	cpse	r20, r17
 196:	09 c0       	rjmp	.+18     	; 0x1aa <main+0x26>
		{
			unsigned char adc_val;
			unsigned int servo_val;
			adc_val = adc_get_val();
 198:	5f df       	rcall	.-322    	; 0x58 <adc_get_val>
			//servo_val = (unsigned long) (adc_val - ADC_MINIMAL_VALUE) * (unsigned long) (servo_maximum_pwm_value - servo_minimal_pwm_value) / (ADC_MAXIMUM_VALUE - ADC_MINIMAL_VALUE) + servo_minimal_pwm_value;
			servo_val = range_converse(adc_val, servo_maximum_pwm_value, servo_minimal_pwm_value);
 19a:	44 a1       	lds	r20, 0x44	; 0x800044 <servo_minimal_pwm_value>
 19c:	55 a1       	lds	r21, 0x45	; 0x800045 <servo_minimal_pwm_value+0x1>
 19e:	62 a1       	lds	r22, 0x42	; 0x800042 <servo_maximum_pwm_value>
 1a0:	73 a1       	lds	r23, 0x43	; 0x800043 <servo_maximum_pwm_value+0x1>
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	94 df       	rcall	.-216    	; 0xce <range_converse>
			servo_set_position(servo_val);
 1a6:	4a d0       	rcall	.+148    	; 0x23c <servo_set_position>
 1a8:	f4 cf       	rjmp	.-24     	; 0x192 <main+0xe>
		}
		else
		{
			if (mode_flag == CENTRAL_POS_MODE)
 1aa:	49 a1       	lds	r20, 0x49	; 0x800049 <mode_flag>
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <main+0x34>
			{
				servo_set_position(servo_central_pwm_value);
 1b0:	80 a1       	lds	r24, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 1b2:	91 a1       	lds	r25, 0x41	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	43 d0       	rcall	.+134    	; 0x23c <servo_set_position>
 1b6:	ed cf       	rjmp	.-38     	; 0x192 <main+0xe>
			}
			else
			{
				if (mode_flag == TEST_MODE)
 1b8:	49 a1       	lds	r20, 0x49	; 0x800049 <mode_flag>
 1ba:	42 30       	cpi	r20, 0x02	; 2
 1bc:	51 f7       	brne	.-44     	; 0x192 <main+0xe>
				{
					for (unsigned int pos_counter = servo_minimal_pwm_value; pos_counter <= servo_maximum_pwm_value; pos_counter++)
 1be:	c4 a1       	lds	r28, 0x44	; 0x800044 <servo_minimal_pwm_value>
 1c0:	d5 a1       	lds	r29, 0x45	; 0x800045 <servo_minimal_pwm_value+0x1>
 1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <main+0x5e>
					{
						servo_set_position(pos_counter);
 1c4:	8c 2f       	mov	r24, r28
 1c6:	9d 2f       	mov	r25, r29
 1c8:	39 d0       	rcall	.+114    	; 0x23c <servo_set_position>
						if (mode_flag != TEST_MODE)
 1ca:	49 a1       	lds	r20, 0x49	; 0x800049 <mode_flag>
 1cc:	42 30       	cpi	r20, 0x02	; 2
 1ce:	71 f4       	brne	.+28     	; 0x1ec <main+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	4f ec       	ldi	r20, 0xCF	; 207
 1d2:	57 e0       	ldi	r21, 0x07	; 7
 1d4:	41 50       	subi	r20, 0x01	; 1
 1d6:	50 40       	sbci	r21, 0x00	; 0
 1d8:	e9 f7       	brne	.-6      	; 0x1d4 <main+0x50>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x58>
 1dc:	00 00       	nop
			}
			else
			{
				if (mode_flag == TEST_MODE)
				{
					for (unsigned int pos_counter = servo_minimal_pwm_value; pos_counter <= servo_maximum_pwm_value; pos_counter++)
 1de:	cf 5f       	subi	r28, 0xFF	; 255
 1e0:	df 4f       	sbci	r29, 0xFF	; 255
 1e2:	42 a1       	lds	r20, 0x42	; 0x800042 <servo_maximum_pwm_value>
 1e4:	53 a1       	lds	r21, 0x43	; 0x800043 <servo_maximum_pwm_value+0x1>
 1e6:	4c 17       	cp	r20, r28
 1e8:	5d 07       	cpc	r21, r29
 1ea:	60 f7       	brcc	.-40     	; 0x1c4 <main+0x40>
						{
							break;
						}
						_delay_ms(1);
					}
					for (unsigned int pos_counter = servo_maximum_pwm_value; pos_counter >= servo_minimal_pwm_value; pos_counter--)
 1ec:	c2 a1       	lds	r28, 0x42	; 0x800042 <servo_maximum_pwm_value>
 1ee:	d3 a1       	lds	r29, 0x43	; 0x800043 <servo_maximum_pwm_value+0x1>
 1f0:	0f c0       	rjmp	.+30     	; 0x210 <main+0x8c>
					{
						servo_set_position(pos_counter);
 1f2:	8c 2f       	mov	r24, r28
 1f4:	9d 2f       	mov	r25, r29
 1f6:	22 d0       	rcall	.+68     	; 0x23c <servo_set_position>
						if (mode_flag != TEST_MODE)
 1f8:	49 a1       	lds	r20, 0x49	; 0x800049 <mode_flag>
 1fa:	42 30       	cpi	r20, 0x02	; 2
 1fc:	51 f6       	brne	.-108    	; 0x192 <main+0xe>
 1fe:	4f ec       	ldi	r20, 0xCF	; 207
 200:	57 e0       	ldi	r21, 0x07	; 7
 202:	41 50       	subi	r20, 0x01	; 1
 204:	50 40       	sbci	r21, 0x00	; 0
 206:	e9 f7       	brne	.-6      	; 0x202 <main+0x7e>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0x86>
 20a:	00 00       	nop
						{
							break;
						}
						_delay_ms(1);
					}
					for (unsigned int pos_counter = servo_maximum_pwm_value; pos_counter >= servo_minimal_pwm_value; pos_counter--)
 20c:	c1 50       	subi	r28, 0x01	; 1
 20e:	d1 0b       	sbc	r29, r17
 210:	44 a1       	lds	r20, 0x44	; 0x800044 <servo_minimal_pwm_value>
 212:	55 a1       	lds	r21, 0x45	; 0x800045 <servo_minimal_pwm_value+0x1>
 214:	c4 17       	cp	r28, r20
 216:	d5 07       	cpc	r29, r21
 218:	60 f7       	brcc	.-40     	; 0x1f2 <main+0x6e>
 21a:	bb cf       	rjmp	.-138    	; 0x192 <main+0xe>

0000021c <pwm_init>:


void pwm_init(void)
{
	// 16-bit timer/counter0 and phase and frequency correct PWM initialization
	DDRB |= 1 << PWM_PIN;
 21c:	41 b1       	in	r20, 0x01	; 1
 21e:	42 60       	ori	r20, 0x02	; 2
 220:	41 b9       	out	0x01, r20	; 1
	TCCR0A = (1 << COM0B1);
 222:	40 e2       	ldi	r20, 0x20	; 32
 224:	4e bd       	out	0x2e, r20	; 46
	TCCR0B = (1 << WGM03) | (1 << CS01); // Prescaler Fcpu/8 (1 MHz)
 226:	42 e1       	ldi	r20, 0x12	; 18
 228:	4d bd       	out	0x2d, r20	; 45
	PERIOD_REG = 10000; // Set period (10000 - 20 ms)
 22a:	40 e1       	ldi	r20, 0x10	; 16
 22c:	57 e2       	ldi	r21, 0x27	; 39
 22e:	53 bd       	out	0x23, r21	; 35
 230:	42 bd       	out	0x22, r20	; 34
	DUTY_REG = 0; // Default duty cycle0%
 232:	15 bd       	out	0x25, r17	; 37
 234:	14 bd       	out	0x24, r17	; 36
 236:	08 95       	ret

00000238 <servo_init>:
#include "servo.h"


void servo_init(void)
{
	pwm_init();
 238:	f1 df       	rcall	.-30     	; 0x21c <pwm_init>
 23a:	08 95       	ret

0000023c <servo_set_position>:
}

void servo_set_position(unsigned int serv_pos)
{
	DUTY_REG = serv_pos;
 23c:	95 bd       	out	0x25, r25	; 37
 23e:	84 bd       	out	0x24, r24	; 36
 240:	08 95       	ret

00000242 <__mulsi3>:
 242:	ad b7       	in	r26, 0x3d	; 61
 244:	be b7       	in	r27, 0x3e	; 62
 246:	ad 5f       	subi	r26, 0xFD	; 253
 248:	bf 4f       	sbci	r27, 0xFF	; 255
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	2d 91       	ld	r18, X+
 250:	3d 91       	ld	r19, X+
 252:	4d 91       	ld	r20, X+
 254:	5c 91       	ld	r21, X
 256:	ee 27       	eor	r30, r30
 258:	ff 27       	eor	r31, r31

0000025a <__mulsi3_helper>:
 25a:	aa 27       	eor	r26, r26
 25c:	bb 27       	eor	r27, r27
 25e:	08 c0       	rjmp	.+16     	; 0x270 <__mulsi3_helper+0x16>
 260:	a2 0f       	add	r26, r18
 262:	b3 1f       	adc	r27, r19
 264:	e4 1f       	adc	r30, r20
 266:	f5 1f       	adc	r31, r21
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	44 1f       	adc	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	77 95       	ror	r23
 276:	67 95       	ror	r22
 278:	98 f3       	brcs	.-26     	; 0x260 <__mulsi3_helper+0x6>
 27a:	70 40       	sbci	r23, 0x00	; 0
 27c:	a9 f7       	brne	.-22     	; 0x268 <__mulsi3_helper+0xe>
 27e:	80 50       	subi	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	91 f7       	brne	.-28     	; 0x268 <__mulsi3_helper+0xe>
 284:	6a 2f       	mov	r22, r26
 286:	7b 2f       	mov	r23, r27
 288:	8e 2f       	mov	r24, r30
 28a:	9f 2f       	mov	r25, r31
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	08 95       	ret

00000292 <__udivmodsi4>:
 292:	a1 e2       	ldi	r26, 0x21	; 33
 294:	1a 2f       	mov	r17, r26
 296:	aa 1b       	sub	r26, r26
 298:	bb 1b       	sub	r27, r27
 29a:	ea 2f       	mov	r30, r26
 29c:	fb 2f       	mov	r31, r27
 29e:	0d c0       	rjmp	.+26     	; 0x2ba <__udivmodsi4_ep>

000002a0 <__udivmodsi4_loop>:
 2a0:	aa 1f       	adc	r26, r26
 2a2:	bb 1f       	adc	r27, r27
 2a4:	ee 1f       	adc	r30, r30
 2a6:	ff 1f       	adc	r31, r31
 2a8:	a2 17       	cp	r26, r18
 2aa:	b3 07       	cpc	r27, r19
 2ac:	e4 07       	cpc	r30, r20
 2ae:	f5 07       	cpc	r31, r21
 2b0:	20 f0       	brcs	.+8      	; 0x2ba <__udivmodsi4_ep>
 2b2:	a2 1b       	sub	r26, r18
 2b4:	b3 0b       	sbc	r27, r19
 2b6:	e4 0b       	sbc	r30, r20
 2b8:	f5 0b       	sbc	r31, r21

000002ba <__udivmodsi4_ep>:
 2ba:	66 1f       	adc	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	1a 95       	dec	r17
 2c4:	69 f7       	brne	.-38     	; 0x2a0 <__udivmodsi4_loop>
 2c6:	60 95       	com	r22
 2c8:	70 95       	com	r23
 2ca:	80 95       	com	r24
 2cc:	90 95       	com	r25
 2ce:	26 2f       	mov	r18, r22
 2d0:	37 2f       	mov	r19, r23
 2d2:	48 2f       	mov	r20, r24
 2d4:	59 2f       	mov	r21, r25
 2d6:	6a 2f       	mov	r22, r26
 2d8:	7b 2f       	mov	r23, r27
 2da:	8e 2f       	mov	r24, r30
 2dc:	9f 2f       	mov	r25, r31
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
